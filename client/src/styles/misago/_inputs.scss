// Use BS5 checkbox scss
.form-check-input {
  display: inline-block;
  width: $custom-control-indicator-size;
  height: $custom-control-indicator-size;
  line-height: $custom-control-indicator-size;

  input {
    width: $custom-control-indicator-size;
    height: $custom-control-indicator-size;
    margin: 0;
    margin-top: ($line-height-base - $custom-control-indicator-size) / -2; // line-height minus check height
    vertical-align: middle;
    background-color: $custom-control-indicator-bg;
    background-repeat: no-repeat;
    background-position: center;
    background-size: contain;
    border: $custom-control-indicator-border-color solid
      $custom-control-indicator-border-width;
    appearance: none;
    color-adjust: exact; // Keep themed appearance for print
    @include border-radius($custom-checkbox-indicator-border-radius);

    &:checked {
      color: $custom-control-indicator-checked-color;
      background: no-repeat 50% / #{$custom-control-indicator-bg-size};
      background-image: escape-svg($custom-checkbox-indicator-icon-checked);
      border-color: $custom-control-indicator-checked-border-color;
      @include gradient-bg($custom-control-indicator-checked-bg);
      @include box-shadow($custom-control-indicator-checked-box-shadow);
    }

    &:focus {
      // the mixin is not used here to make sure there is feedback
      @if $enable-shadows {
        box-shadow: $input-box-shadow, $input-focus-box-shadow;
      } @else {
        box-shadow: $custom-control-indicator-focus-box-shadow;
      }
    }

    &:focus:not(:checked) {
      border-color: $custom-control-indicator-focus-border-color;
    }

    &:not(:disabled):active {
      color: $custom-control-indicator-active-color;
      background-color: $custom-control-indicator-active-bg;
      border-color: $custom-control-indicator-active-border-color;
      @include box-shadow($custom-control-indicator-active-box-shadow);
    }

    // Use [disabled] and :disabled to work around https://github.com/twbs/bootstrap/issues/28247
    &[disabled],
    &:disabled {
      color: $custom-control-label-disabled-color;
      background-color: $custom-control-indicator-checked-disabled-bg;
    }
  }
}

// Spread items in category select
.form-control-category-select {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

// Make category select placeholder and icons faded
.form-control-category-select-placeholder,
.form-control-category-select-separator,
.form-control-category-select-caret {
  color: $input-placeholder-color;
  opacity: 1;
}

// Add left margin to caret
.form-control-category-select-caret {
  margin-left: $spacer / 2;
}

// Add margin to category icon
.form-control-category-select-item .category-icon {
  margin-right: $spacer / 4;
}

// Add ellipsis to placeholder and value
.form-control-category-select-placeholder,
.form-control-category-select-value {
  width: 100%;
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
  text-align: left;
}

// Add space between selected categories
.form-control-category-select-separator {
  margin: 0 $spacer / 2;
}

// Limit max length of first selected category on very small displays
@media only screen and (max-width: 400px) {
  .form-control-category-select-value-complex {
    display: flex;

    .form-control-category-select-item:first-child {
      overflow: hidden;
      white-space: nowrap;
      text-overflow: ellipsis;
      text-align: left;
      max-width: 45%;
    }
  }
}
